import{_ as i,v as r,b as d,F as e,E as s,O as o,L as a,R as c,M as p}from"./chunks/framework.a49639fc.js";const h="/experimental/images/vscode-eosio-token-contract-build.png",J=JSON.parse('{"title":"Docker Contract Development Flow","description":"","frontmatter":{"title":"Docker Contract Development Flow","deploy":["staging","mainnet"],"order":-9990,"outline":[0,4],"prev":false},"headers":[],"relativePath":"guides/Docker/docker-contract-development-flow.md","filePath":"guides/Docker/docker-contract-development-flow.md","lastUpdated":1700051829000}'),u={name:"guides/Docker/docker-contract-development-flow.md"},y=c(`<h1 id="docker-contract-development-flow" tabindex="-1">Docker Contract Development Flow <a class="header-anchor" href="#docker-contract-development-flow" aria-label="Permalink to &quot;Docker Contract Development Flow&quot;">​</a></h1><p>A smart contract is written in C++ but compiled into WASM.</p><p>Developers must have some knowledge in C++ to write smart contracts for the Ultra Blockchain.</p><h2 id="hello-world-smart-contract" tabindex="-1">Hello World Smart Contract <a class="header-anchor" href="#hello-world-smart-contract" aria-label="Permalink to &quot;Hello World Smart Contract&quot;">​</a></h2><p>Recommended to setup a <a href="./development-environment.html">VSCode Environment</a> before moving forward.</p><h3 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h3><p>Create a directory called <code>hello</code> inside of any of the following directories:</p><ul><li><p>Windows: <code>C:\\\\Users\\\\Username\\\\ultra_workdir\\\\hello</code></p></li><li><p>Linux: <code>~/ultra_workdir/hello</code></p></li><li><p>Docker Container: <code>/opt/ultra_workdir/hello</code></p></li></ul><p><em>Additional permissions may be required to create the directory.</em></p><h3 id="create-hello-cpp" tabindex="-1">Create hello.cpp <a class="header-anchor" href="#create-hello-cpp" aria-label="Permalink to &quot;Create hello.cpp&quot;">​</a></h3><p>Navigate to the following directory.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd /opt/ultra_workdir/hello</span></span></code></pre></div><p>Create the file <code>hello.cpp</code> inside of the <code>hello</code> directory.</p><p>Then place the following content inside of <code>hello.cpp</code> and ensure you save the file.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/eosio.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">]]</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">hello</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">contract</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">action</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hi</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">name</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">user</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> user</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><em>Above is Content for <code>hello.cpp</code></em></p>`,16),m={id:"eosio-cppeosio-cppcdt-cpp-binary",tabindex:"-1"},C=e("a",{class:"header-anchor",href:"#eosio-cppeosio-cppcdt-cpp-binary","aria-label":'Permalink to "<Mainnet>eosio-cpp</Mainnet><Staging>eosio-cpp</Staging><Experimental>cdt-cpp</Experimental> binary"'},"​",-1),g=e("p",null,"There is a single binary which is included with our docker image.",-1),D=e("h3",{id:"what-is-it",tabindex:"-1"},[a("What is it? "),e("a",{class:"header-anchor",href:"#what-is-it","aria-label":'Permalink to "What is it?"'},"​")],-1),F=e("ul",null,[e("li",null,"A clang-based WASM compiler and ABI generator tool"),e("li",null,"Must be ran anywhere inside of the docker image")],-1),_=e("h3",{id:"usage",tabindex:"-1"},[a("Usage "),e("a",{class:"header-anchor",href:"#usage","aria-label":'Permalink to "Usage"'},"​")],-1),f=e("div",{class:"language-"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"eosio-cpp -help")])])])],-1),A=e("div",{class:"language-"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"eosio-cpp -help")])])])],-1),b=e("div",{class:"language-"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"cdt-cpp -help")])])])],-1),k=e("h2",{id:"compiling-a-smart-contract",tabindex:"-1"},[a("Compiling a Smart Contract "),e("a",{class:"header-anchor",href:"#compiling-a-smart-contract","aria-label":'Permalink to "Compiling a Smart Contract"'},"​")],-1),w=e("code",null,"hello.cpp",-1),v=e("code",null,"eosio-cpp",-1),x=e("code",null,"eosio-cpp",-1),E=e("code",null,"cdt-cpp",-1),B=e("p",null,[a("Run the following command "),e("strong",null,"inside the docker image"),a(".")],-1),q=e("div",{class:"language-cpp"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"cpp"),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"eosio"),e("span",{style:{color:"#89DDFF"}},"-"),e("span",{style:{color:"#A6ACCD"}},"cpp hello"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#A6ACCD"}},"cpp")])])])],-1),M=e("div",{class:"language-cpp"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"cpp"),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"eosio"),e("span",{style:{color:"#89DDFF"}},"-"),e("span",{style:{color:"#A6ACCD"}},"cpp hello"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#A6ACCD"}},"cpp")])])])],-1),R=e("div",{class:"language-cpp"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"cpp"),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"cdt"),e("span",{style:{color:"#89DDFF"}},"-"),e("span",{style:{color:"#A6ACCD"}},"cpp hello"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#A6ACCD"}},"cpp")])])])],-1),P=c('<p>Three files should be created in the <code>hello</code> directory.</p><ul><li>hello.cpp <ul><li>This is the source code of an example smart contract.</li></ul></li><li>hello.abi <ul><li>This file describes the interface of the smart contract.</li></ul></li><li>hello.wasm <ul><li>This is a compiled Web Assembly smart contract.</li></ul></li></ul><p>After compiling the smart contract there are two options for deployment in the local development environment.</p><ul><li><a href="./../../tools/ultratest/ultratest.html">Deploy with &#39;ultratest&#39; framework</a></li><li><a href="./../../tools/protocol/cleos.html#deploying-a-smart-contract">&#39;cleos&#39; based contract deployment</a></li></ul><h2 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h2>',5),U=e("code",null,"eosio-cpp",-1),S=e("code",null,"eosio-cpp",-1),T=e("code",null,"cdt-cpp",-1),L=c(`<p>We will try compiling the <code>eosio.token</code> contract in this example.</p><h3 id="preparations" tabindex="-1">Preparations <a class="header-anchor" href="#preparations" aria-label="Permalink to &quot;Preparations&quot;">​</a></h3><p>Create a directory called <code>eosio.token</code> in one of the following locations:</p><ul><li><p>Windows: <code>C:\\\\Users\\\\Username\\\\ultra_workdir\\\\eosio.token</code></p></li><li><p>Linux: <code>~/ultra_workdir/eosio.token</code></p></li><li><p>Docker Container: <code>/opt/ultra_workdir/eosio.token</code></p></li></ul><p>After creating the directory, create directories inside of <code>eosio.token</code> with the following paths:</p><ul><li><code>eosio.token/include/eosio.token</code></li><li><code>eosio.token/src</code></li></ul><p>Obtain the following files from <a href="./../../examples/eosio.token.html">the following markdown page</a> and append the content from each section in their own corresponding file.</p><h3 id="example-folder-structure" tabindex="-1">Example Folder Structure <a class="header-anchor" href="#example-folder-structure" aria-label="Permalink to &quot;Example Folder Structure&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/opt/ultra_workdir/eosio.token/</span></span>
<span class="line"><span style="color:#A6ACCD;">    |</span></span>
<span class="line"><span style="color:#A6ACCD;">    |- CMakeLists.txt</span></span>
<span class="line"><span style="color:#A6ACCD;">    |- include/</span></span>
<span class="line"><span style="color:#A6ACCD;">    |  |- eosio.token/</span></span>
<span class="line"><span style="color:#A6ACCD;">    |     |- eosio.token.hpp</span></span>
<span class="line"><span style="color:#A6ACCD;">    |- src/</span></span>
<span class="line"><span style="color:#A6ACCD;">        |- eosio.token.cpp</span></span></code></pre></div><h3 id="building-using-cmakelists-txt" tabindex="-1">Building using CMakeLists.txt <a class="header-anchor" href="#building-using-cmakelists-txt" aria-label="Permalink to &quot;Building using CMakeLists.txt&quot;">​</a></h3><p>After preparing all the smart contract files and CMakeLists.txt you should be able to proceed with building the contract using the following commands:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../</span></span>
<span class="line"><span style="color:#FFCB6B;">make</span></span></code></pre></div><p>If you want to rebuild the contract you can either run the <code>make</code> command in the <code>build</code> directory again or delete the <code>build</code> directory and perform the commands above again</p><p>If everything is setup correctly the commands will use the <code>CMakeLists.txt</code> and build your contract.</p><p><img src="`+h+`" alt=""></p><br><h2 id="additional-files-with-cmake" tabindex="-1">Additional Files with CMake <a class="header-anchor" href="#additional-files-with-cmake" aria-label="Permalink to &quot;Additional Files with CMake&quot;">​</a></h2><p>CMake has a handful of functions that can be placed inside of a <code>CMakeLists.txt</code> file to include other files, and folders.</p><hr><p><code>target_include_directories(target PUBLIC dir_list)</code></p><blockquote><p>Specifies include directories to use when compiling a given target.</p></blockquote><p><strong>Example</strong></p><p>This example shows how to include other folders.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">target_include_directories(mycontract </span></span>
<span class="line"><span style="color:#A6ACCD;">    PUBLIC </span></span>
<span class="line"><span style="color:#A6ACCD;">    \${CMAKE_CURRENT_SOURCE_DIR}/include </span></span>
<span class="line"><span style="color:#A6ACCD;">    \${CMAKE_CURRENT_SOURCE_DIR}/common/include </span></span>
<span class="line"><span style="color:#A6ACCD;">    \${CMAKE_CURRENT_SOURCE_DIR}/mycontract_specific/include)</span></span></code></pre></div><hr><p><code>add_contract</code></p><blockquote><p>Used to build your smart contract and generate an ABI, the first parameter is the contract name, the second is the cmake target name, and the rest are the CPP files needed to build the contract.</p></blockquote><p><strong>Example</strong></p><p>This example shows how to include additional <code>.cpp</code> source files.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">add_contract(mycontract mycontract </span></span>
<span class="line"><span style="color:#A6ACCD;">    \${CMAKE_CURRENT_SOURCE_DIR}/src/a.cpp </span></span>
<span class="line"><span style="color:#A6ACCD;">    \${CMAKE_CURRENT_SOURCE_DIR}/src/b.cpp)</span></span></code></pre></div><hr><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><p>Any errors encountered during builds or deployment can potentially have solutions in our <a href="./troubleshooting.html">troubleshooting section</a>.</p>`,33);function I(W,O,$,N,K,H){const l=p("Mainnet"),n=p("Staging"),t=p("Experimental");return r(),d("div",null,[y,e("h2",m,[s(l,null,{default:o(()=>[a("eosio-cpp")]),_:1}),s(n,null,{default:o(()=>[a("eosio-cpp")]),_:1}),s(t,null,{default:o(()=>[a("cdt-cpp")]),_:1}),a(" binary "),C]),g,D,F,_,s(l,null,{default:o(()=>[f]),_:1}),s(n,null,{default:o(()=>[A]),_:1}),s(t,null,{default:o(()=>[b]),_:1}),k,e("p",null,[a("Using the above "),w,a(" file we can utilize "),s(l,null,{default:o(()=>[v]),_:1}),s(n,null,{default:o(()=>[x]),_:1}),s(t,null,{default:o(()=>[E]),_:1}),a(" to compile it.")]),B,s(l,null,{default:o(()=>[q]),_:1}),s(n,null,{default:o(()=>[M]),_:1}),s(t,null,{default:o(()=>[R]),_:1}),P,e("p",null,[a("When building smart contracts, developers may have more than one file. While "),s(l,null,{default:o(()=>[U]),_:1}),s(n,null,{default:o(()=>[S]),_:1}),s(t,null,{default:o(()=>[T]),_:1}),a(" provides the basics, it is recommended to use CMake for anything more complex than single file.")]),L])}const V=i(u,[["render",I]]);export{J as __pageData,V as default};
