import{_ as r,v as F,b as y,F as s,L as t,E as n,O as a,R as c,M as o}from"./chunks/framework.a49639fc.js";const q=JSON.parse('{"title":"issue Smart Contract Example","description":"","frontmatter":{"title":"issue Smart Contract Example","deploy":["staging","mainnet"]},"headers":[],"relativePath":"guides/Uniq Variants/Examples/on-issue.md","filePath":"guides/Uniq Variants/Examples/on-issue.md","lastUpdated":1695890059000}'),D={name:"guides/Uniq Variants/Examples/on-issue.md"},i=c('<h1 id="uniq-variants-on-issue-b-smart-contract-example" tabindex="-1">Uniq variants - On issue.b smart contract example <a class="header-anchor" href="#uniq-variants-on-issue-b-smart-contract-example" aria-label="Permalink to &quot;Uniq variants - On issue.b smart contract example&quot;">​</a></h1><p>This page describes an example smart contract that utilizes smart contract notifications produced by <code>eosio.nft.ft</code> contract when one of the actions within it are utilized. As a goal for this smart contract we chose to modify the token URI right after it is minted based on it&#39;s serial number. For tokens with even or odd serial number we will substitute one of 2 possible URIs.</p><h3 id="logic" tabindex="-1">Logic <a class="header-anchor" href="#logic" aria-label="Permalink to &quot;Logic&quot;">​</a></h3><p>When writing a smart contract that actively interacts with some other contract you need to either write some definitions to properly read the data from that other smart contract or you will need to get the definitions directly from the smart contract source code. This is needed since data on blockchain is stored in dense binary representation so without these definitions you will only be able to get the raw binary data from the smart contract which is not convenient to work with.</p><p>For this smart contract to properly interact with <code>eosio.nft.ft</code> we will need information regarding the following tables:</p><ul><li><code>token.b</code> - described using <code>token_v1</code> structure. This table stores information about all tokens of NFT standard v1</li><li><code>next.token</code> - described using <code>next_token_number</code> structure. This singleton stores the id of the next token that will be minted, by subtracting 1 you get the id of the token that was previously minted.</li></ul><p>To know the layout of those tables refer to the following documents <a href="./../../../contracts/NFT Contract/nft-tables.html">uniq metadata fields</a></p><p>In addition to the above we also need to define an action within our smart contract with interface that matches <code>issue.b</code> action. This will cause <code>eosio.nft.ft</code> contract to notify us when <code>issue.b</code> action is executed and the account that will host this contract (here it will be <code>onissue</code>) is involved in the minting process (e.g. <code>onissue</code> is the issuer of the token). For that the following interface is re-created with an indication to listen for <code>issue.b</code> action:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">on_notify</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft::issue.b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">]]</span></span>\n<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">on_issue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">issue</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>We will also add 2 extra actions to be able to configure which URI will be used depending on if serial number is odd or even. This data will be stored a simple singleton <code>uricfg</code> and depending on the scope it will be either for even URIs (scope is 0) or for odd URIs (scope is 1). The actions themselves are <code>even_uri</code> and <code>odd_uri</code> and they simply write input string into the singleton.</p><p>Logic for <code>on_issue</code> listener is to first deduce the token ID that was just minted by reading <code>next.token</code> singleton, then to read the <code>token.b</code> to get the serial number of the token. After that we simply read <code>uricfg</code> singleton and get the URI to write based on the serial number of the token and do an inline call to <code>settknmeta</code>. The <code>settknmeta</code> action will be responsible for writing the new URI we want into the token data since our example contract does not have authority to change data of other smart contracts - we can only read the data and do inline action calls.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>To be able to do the inline call to <code>settknmeta</code> an extra permission is required for <code>onissue</code> account. It is configured in the test using the following <code>cleos</code> command:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">await cleos(`set account permission onissue active --add-code onissue -p onissue@owner`)</span></span></code></pre></div><p>This is equivalent to adding <code>onissue@eosio.code</code> account permission inside <code>onissue@active</code>. And effectively means that smart contract stored in <code>onissue</code> account has same authority that <code>onissue@active</code> would have</p></div><h3 id="disclaimers" tabindex="-1">Disclaimers <a class="header-anchor" href="#disclaimers" aria-label="Permalink to &quot;Disclaimers&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This example contract is not production ready and has some functionality and checks missing, be sure to do a proper testing if you intend to use any of the code provided in your solution</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This contract only listens to <code>issue.b</code> action, but tokens may also be issued when <code>issue</code> action is called after v1 actions are enabled. That means that in addition to listening to <code>issue.b</code> action you may also want to listen to <code>issue</code> action. This is only applicable in cases where you don&#39;t control the service that initiates the minting process (e.g. token is issued from 3rd party to your service). This example contract assumes you have full control over the minting process so only <code>issue.b</code> action is considered</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>issue.b</code> action supports minting multiple tokens at a time but this example contract will only update the very last token minted per <code>issue.b</code> action. This again assumes you have full ownership of the minting process and can control the number of tokens minted at a time. If this is not the case the smart contract will require adjustments to support multiple tokens minted at a time.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This contract assumes no one will be issuing tokens to <code>onissue</code> contract so if someone actually does try to issue a token this example contract will try to modify it, but will fail since it will most likely not be the factory manager.</p></div><h3 id="how-to-build-and-test" tabindex="-1">How to build and test <a class="header-anchor" href="#how-to-build-and-test" aria-label="Permalink to &quot;How to build and test&quot;">​</a></h3><p>First step after writing the <code>onissue.hpp</code> and <code>onissue.cpp</code> will be to build the contract. Follow <a href="./../../Docker/building-smart-contracts.html">this</a> for instructions of the build process.</p>',19),C=s("code",null,"eosio-cpp",-1),u=s("code",null,"eosio-cpp",-1),A=s("code",null,"cdt-cpp",-1),d=s("div",{class:"language-bash"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#FFCB6B"}},"eosio-cpp"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#C3E88D"}},"./src/onissue.cpp"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#C3E88D"}},"-abigen")])])])],-1),h=s("div",{class:"language-bash"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#FFCB6B"}},"eosio-cpp"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#C3E88D"}},"./src/onissue.cpp"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#C3E88D"}},"-abigen")])])])],-1),f=s("div",{class:"language-bash"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#FFCB6B"}},"cdt-cpp"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#C3E88D"}},"./src/onissue.cpp"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#C3E88D"}},"-abigen")])])])],-1),m=c(`<p>After you successfully compile the contract you will have two files: <code>onissue.abi</code> and <code>onissue.wasm</code> both of them are needed for proper functionality of your contract on-chain.</p><p>The test provided in <code>onissue.ultra_test.js</code> in the section below assumes that the compiled contract is located at <code>pconfig.ultraRootPath + &#39;/eosio.contracts/build/contracts/onissue&#39;</code> where <code>ultraRootPath</code> is the persistent path configured for <code>ultratest</code> (e.g. the end result could be <code>~/ultra/eosio.contracts/build/contracts/onissue</code>). In your case it may not be true so be sure to modify the <code>set contract</code> section of the test with correct path to your contract.</p><p>To run the test simply run the <code>ultratest</code> with proper path to the test file:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ultratest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./onissue.ultra_test.js</span></span></code></pre></div><h3 id="smart-contract-source-code" tabindex="-1">Smart contract source code <a class="header-anchor" href="#smart-contract-source-code" aria-label="Permalink to &quot;Smart contract source code&quot;">​</a></h3><details class="details custom-block"><summary>onissue.hpp</summary><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/eosio.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/system.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/asset.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/singleton.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/binary_extension.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Alternatively can include if available:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//#include &lt;eosio.nft.ft/nft.common.hpp&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//#include &lt;eosio.nft.ft/eosio.nft.ft.hpp&gt;</span></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Declare table structure types</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">next_token_number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">next_token_number</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  }</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">singleton</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">next.token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> next_token_number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> next_token_number_singleton</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">token_v1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;">                id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;">                token_factory_id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    time_point_sec          mint_date</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;">                serial_number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int64_t</span><span style="color:#F07178;">                 uos_payment</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">        uri</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">checksum256</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">   hash</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">primary_key</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">token_v1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">token_factory_id</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">mint_date</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">serial_number</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">uos_payment</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">uri</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">hash</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  }</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">multi_index</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">token.b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> token_v1 </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> token_table_v1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Get interface issue_wrap_v1 type from eosio.nft.ft contract</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;"> token_factory_id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> amount</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    string custom_data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_config</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">token_factory_id</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">amount</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">custom_data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  }</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">issue_token_config</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> issue_token_config_vector</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_metadata</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> meta_uri</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">checksum256</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> meta_hash</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_metadata</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">meta_uri</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">meta_hash</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  }</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">issue_token_metadata</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> issue_token_metadata_vector</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    name                      to</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    issue_token_config_vector token_configs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    string                    memo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">            authorizer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">asset</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">           maximum_uos_payment</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    binary_extension</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">issue_token_metadata_vector</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> token_metadata</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">token_configs</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">memo</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">authorizer</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">maximum_uos_payment</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">token_metadata</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  }</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">onissue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">contract</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">contract</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">action</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">even.uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">even_uri</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">uri</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">action</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">odd.uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">odd_uri</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">uri</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">onissue</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">receiver</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">datastream</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">ds</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">contract</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">receiver</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ds</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">on_notify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft::issue.b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">on_issue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">issue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">table</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uricfg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">uri_config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      string value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">uri_config</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    }</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //scope: 0 (even), 1 (odd)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">singleton</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uricfg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> uri_config </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> uri_config_singleton</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div></details><details class="details custom-block"><summary>onissue.cpp</summary><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onissue.hpp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">onissue</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">even_uri</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">uri</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">onissue</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">uri_config_singleton </span><span style="color:#82AAFF;">_s</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_self</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  _s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">{.value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> uri}</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">onissue</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">odd_uri</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">uri</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">onissue</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">uri_config_singleton </span><span style="color:#82AAFF;">_s</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_self</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  _s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">{.value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> uri}</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">onissue</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">on_issue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">issue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Multiple tokens could be issued by a single issue action.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // For the purposes of this smart contract we will assume that &#39;onissue&#39; account will issue tokens</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // only from the factories that this contract should apply to and that only one token will be issued at a time.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // If more granular logic is required then it is necessary to check issue.token_configs vector and check</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // each token_factory_id to make sure it is one of the factories managed by &#39;onissue&#39;.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Additionally will need to check the issue.token_configs[i].amount and apply the logic for each token minted</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">name token_owner </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> issue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // next token number singleton indicates the id of the next token that will be minted</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // we can safely subtract 1 from it to get the id of that token that was just minted</span></span>
<span class="line"><span style="color:#A6ACCD;">  next_token_number_singleton </span><span style="color:#82AAFF;">next_token_number_s</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint64_t</span><span style="color:#A6ACCD;"> token_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> next_token_number_s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">token_table_v1 </span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> token_owner</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> token_itr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tokens</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">token_id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint64_t</span><span style="color:#A6ACCD;"> serial_number_remainder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> token_itr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">serial_number </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">onissue</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">uri_config_singleton </span><span style="color:#82AAFF;">uri_config_s</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_self</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> serial_number_remainder</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  string new_uri </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> uri_config_s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // if the eosio.nft.ft.hpp header is included the following wrapper can be used</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //eosio::nft::set_token_meta_action settknmeta(&quot;eosio.nft.ft&quot;_n, {{ get_self(), &quot;active&quot;_n }});</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //settknmeta.send( token_id, token_owner, &quot;modify on mint&quot;, new_uri, std::nullopt );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">action</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    permission_level{</span><span style="color:#82AAFF;">get_self</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">active</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">settknmeta</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">make_tuple</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> token_id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> token_owner</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">string</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modify on mint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">new_uri</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">checksum256</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></details><h3 id="validation-test" tabindex="-1">Validation test <a class="header-anchor" href="#validation-test" aria-label="Permalink to &quot;Validation test&quot;">​</a></h3><details class="details custom-block"><summary>onissue.ultra_test.js</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">onissue_test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">requiredPlugins</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">requiresSystemContracts</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">nodeosConfigs</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            config</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">abi-serializer-max-time-ms</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">requiredUnlimitedAccounts</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">requiredAccounts</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">        ]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">tests</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">assert</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">endpoint</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cleos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">rpc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">api</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ecc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pconfig</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sleep</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">ms</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ms</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">activers</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">default_create_wrap_v1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">create_test_conversion_rate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">create_token_factory_v1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">issue_nft_v1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./eosio.nft.ft/shared_nft</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)(</span><span style="color:#A6ACCD;">cleos</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">api</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rpc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">requiredAccounts</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">endpoint</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">test_create</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">default_create_wrap_v1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            stat</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            asset_manager</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            asset_creator</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            factory_uri</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            factory_hash</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d5768f8e2a7b1a8a9774dfb538e0a1928d0d9ac5f08bd781c21459b4308dc523</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            default_token_uri</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            default_token_hash</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d5768f8e2a7b1a8a9774dfb538e0a1928d0d9ac5f08bd781c21459b4308dc523</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">should activate v1 and allow 3rd party factories</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">activers</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">failed to activate v1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sleep</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">should create test factory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// need to have oracle rates available for NFT contract to work properly</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">create_test_conversion_rate</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">create_token_factory_v1</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">test_create</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">should deploy onissue contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// provide KYC with dummy signature to be able to deploy the contract</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cleos</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">push action eosio.kyc registerkyc &#39;[&quot;onissue&quot;,&quot;ultra&quot;,&quot;bfed20bb7e82fd800f653411d17d9ec1f51ff7e3ac5635113061af50a99d40e4&quot;,&quot;SIG_K1_KiyvFxSYrFNawpf747HFG4wDtq2wjV3dp6dbW6AijtMiKSzz5Gm5JBtLQ55yKnMpbsUuJwYc9AsDoTANMhVqKrfLXCmaid&quot;,&quot;SIG_K1_KiyvFxSYrFNawpf747HFG4wDtq2wjV3dp6dbW6AijtMiKSzz5Gm5JBtLQ55yKnMpbsUuJwYc9AsDoTANMhVqKrfLXCmaid&quot;]&#39; -p ultra.kyc</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Did not register KYC for onissue account</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// modify the path to the compiled contract as needed</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">contractPath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pconfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ultraRootPath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/eosio.contracts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cleos</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">set contract onissue </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">contractPath</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/build/contracts/onissue onissue.wasm onissue.abi -p onissue@active</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Did not set contract for onissue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// allow inline actions to use active permission of &#39;onissue&#39; account</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cleos</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">set account permission onissue active --add-code onissue -p onissue@owner</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Could not set onissue permissions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">should try to issue a token and fail because even.uri and odd.uri are not configured for smart contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">issue_nft_v1</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">test_create</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asset_manager</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">token_factory_id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> amount</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> custom_data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">test_create</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asset_manager</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">singleton does not exist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">was able to mint a token</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">should configure even.uri and odd.uri</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cleos</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">push action onissue even.uri &#39;[&quot;http://test.io/even.json&quot;]&#39; -p onissue</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Was not able to configure even URI</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cleos</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">push action onissue odd.uri &#39;[&quot;http://test.io/odd.json&quot;]&#39; -p onissue</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Was not able to configure odd URI</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">should issue 2 tokens, first one should have even URI, second one should have odd uri</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// first token has serial number of 1 - odd</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// second token has serial number of 2 - even</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// as mentioned in the contract code - will only issue 1 token at a time</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// token_factory_id is 0 since it is the first factory ever created within this test so it will have id of 0</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// in practice you need to get your token factory ID after creation from the chain</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">issue_nft_v1</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">test_create</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asset_manager</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">token_factory_id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> amount</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> custom_data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">test_create</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asset_manager</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">was not able to mint tokens</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">issue_nft_v1</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">test_create</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asset_manager</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">token_factory_id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> amount</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> custom_data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">test_create</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asset_manager</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">was not able to mint tokens</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// check tokens owned by &#39;onissue&#39; and make sure that first one has odd.json URI and second one has even.json URI</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tokens</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rpc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_table_rows</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">json</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eosio.nft.ft</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> scope</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">onissue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> table</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">token.b</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">tokens</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rows</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uri</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://test.io/odd.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Wrong token 1 URI</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">tokens</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rows</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uri</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://test.io/even.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Wrong token 2 URI</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></details>`,9);function _(g,b,E,k,v,w){const l=o("Mainnet"),p=o("Staging"),e=o("Experimental");return F(),y("div",null,[i,s("p",null,[t("As an alternative the build command using "),n(l,null,{default:a(()=>[C]),_:1}),n(p,null,{default:a(()=>[u]),_:1}),n(e,null,{default:a(()=>[A]),_:1}),t(":")]),n(l,null,{default:a(()=>[d]),_:1}),n(p,null,{default:a(()=>[h]),_:1}),n(e,null,{default:a(()=>[f]),_:1}),m])}const x=r(D,[["render",_]]);export{q as __pageData,x as default};
