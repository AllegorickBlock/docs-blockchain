import{_ as e,v as i,b as o,R as t}from"./chunks/framework.a49639fc.js";const a="/experimental/images/gdc/fr-1.png",s="/experimental/images/gdc/fr-2.png",r="/experimental/images/gdc/fr-3.png",l="/experimental/images/gdc/fr-4.png",b=JSON.parse('{"title":"About Game Builds","description":"","frontmatter":{"title":"About Game Builds","deploy":["staging","mainnet"],"order":4},"headers":[],"relativePath":"guides/Game Dev Center/4. about-game-builds.md","filePath":"guides/Game Dev Center/4. about-game-builds.md","lastUpdated":1697036691000}'),n={name:"guides/Game Dev Center/4. about-game-builds.md"},p=t('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>Game builds are actually a combination of one or more repositories containing files. In other words Create repositories =&gt; Upload files in repositories =&gt; Assemble different repositories to create a build</p><p>Ultra lets you create different types of file repositories in which you’ll upload different parts of your game files:</p><ul><li><strong>Core game files:</strong> Contains the game executable and most of the game files.</li><li><strong>Game DLC:</strong> additional content you want to distribute separately such as new maps, skins, music, ...</li><li><strong>Core demo game files:</strong> Contains all the files necessary to download and play a demo of your game.</li><li><strong>Game language packs:</strong> files related to a specific language such as sounds, movies and textures you believe is unnecessary to send to users who don’t talk the language <strong>(Coming soon).</strong></li><li><strong>Game dedicated server:</strong> Files necessary to run a dedicated server of your game. This allows anyone, even if they don’t own the game, to download and run a dedicated server <strong>(Coming soon).</strong></li></ul><p>Every time you create a repository, Ultra will automatically assign it a repository ID.</p><p>A repository ID looks like this: WINCOREG91a7f553-5dd7-4078-813d-b5064629d527</p><p>Repository IDs are used to let you tell File Beam in what repositories different files should be uploaded.</p><p>Every time you upload files with File Beam to a repository, Ultra will create a new version of that repository while keeping the old one.</p><p>Ultra’s versioned repositories is what will enable you to:</p><ol><li>Easily apply updates to your customers files.</li><li>Roll back to a previous version if there are issues with your latest build</li><li>Operate multiple builds simultaneously through branching. For example, operate a Beta branch and a Master Branch of the same product simultaneously.</li><li>Automate a CI/CD pipeline (<a href="https://en.wikipedia.org/wiki/CI/CD" target="_blank" rel="noreferrer">https://en.wikipedia.org/wiki/CI/CD</a>)</li></ol><p>Important to know:</p><p>Including a DLC repository in a build doesn’t mean the buyer of the game will receive this DLC! It only means the files contained in the DLC repository version you associated with this build are compatible with this build. In other words, the buyer will still have to separately buy the DLC to get it, and when he buys it, Ultra’s file distribution system will know what DLC repository version to download for this particular game build version.</p><p>In the future you’ll be able to “bundle” DLCs tokens with your Game tokens. In the meantime, if you want gamers to get DLCs as part of the game they buy, upload them in your game’s core game files repository.</p><p>When you include a Language pack version in a build, the buyer of this build will have the ability to download it if he wants it. If you want to separately sell a language pack you need to upload the language pack in a DLC repository and sell it as a DLC.</p><p>Ultra’s distribution technology has been built for cross platform publishing. While at this point, we only support the Windows platform, future updates will include MacOS and Linux support</p><hr><h2 id="creating-files-repositories" tabindex="-1">Creating Files Repositories <a class="header-anchor" href="#creating-files-repositories" aria-label="Permalink to &quot;Creating Files Repositories&quot;">​</a></h2><ol><li>Go to the Game dev center of your game,</li><li>In the left menu go in File Management → File Repository section</li><li>Click on <strong>“CREATE NEW WINDOWS FILES REPOSITORY”</strong></li></ol><p><img src="'+a+'" alt="fr-1"> A View of the Files Repository section of the File Manager</p><p>Pro Tip:</p><p>Ultra’s distribution technology has been built to support cross platform publishing. Future updates will include MacOS and Linux support. In the meantime you can already use cross platform repositories. Cross platform repositories can be used to store platform-independent files such as mp3, PNGs, etc. They are convenient for Language packs or DLCs you’d upload only one time and are usable on all platforms. For the sake of simplicity, in this tutorial we will assume your game only works on windows and will only create windows repositories as a result.</p><ol><li>After Clicking on “CREATE NEW WINDOWS FILES REPOSITORY” , a modal will show up:</li></ol><p><img src="'+s+'" alt="fr-2"> The Create new windows Files Repository Modal</p><p><img src="'+r+'" alt="fr-3"> Opened dropdown menu showing various types of repositories</p><p>A drop down menu allows you to choose what type of repository you want to create.</p><ol><li>Select Game: Game core game Files</li></ol><p>Pro Tip:</p><p>You at least need one Core Game Files to assemble and publish a game build.</p><ol><li>Fill in the field to give this repository an internal repository name.</li><li>Press the <strong>“Create Files Repository”</strong></li></ol><p>Pro Tip:</p><p>Internal repository names are for internal use only, they will never be visible to the public. We recommend you to choose distinct names to help you later remember what kind of files it contains. Examples:</p><ul><li>Standard files</li><li>Standard with mods</li><li>Censored files</li><li>Chinese version</li><li>Compiling server 2 output</li><li>Light build</li><li>Paris office</li><li>...</li></ul><ol><li>Repeat this but this time let’s make 1 DLC repositories and 2 language packs repositories. When you are done, it should look similar to this:</li></ol><p><img src="'+l+'" alt="fr-4"> A list of repositories of a game. Notice at this point there are 0 versions everywhere because we’ve haven’t uploaded anything in them.</p><p>We are now ready to upload your game files!</p>',35),u=[p];function d(m,h,g,c,f,y){return i(),o("div",null,u)}const v=e(n,[["render",d]]);export{b as __pageData,v as default};
