import{_ as r,C as o,c as i,H as a,w as e,L as n,o as E,k as s,a as l}from"./chunks/framework.vEmsHuDM.js";const $=JSON.parse('{"title":"Compile a Contract","description":"","frontmatter":{"title":"Compile a Contract","order":-99997,"oultine":[0,4]},"headers":[],"relativePath":"blockchain/general/tools/cdt/compile-a-contract.md","filePath":"blockchain/general/tools/cdt/compile-a-contract.md","lastUpdated":null}'),y={name:"blockchain/general/tools/cdt/compile-a-contract.md"},d=n('<h1 id="compile-a-contract" tabindex="-1">Compile a Contract <a class="header-anchor" href="#compile-a-contract" aria-label="Permalink to &quot;Compile a Contract&quot;">​</a></h1><p>You can follow <a href="./create-a-contract.html">Create A Contract</a> to create a simple Hello World contract.</p><p>Or example contract can found at this <a href="https://github.com/ultraio/eosio.cdt/tree/master/examples/hello" target="_blank" rel="noreferrer">https://github.com/ultraio/eosio.cdt/tree/master/examples/hello</a></p><h2 id="compile-via-cli" tabindex="-1">Compile via CLI <a class="header-anchor" href="#compile-via-cli" aria-label="Permalink to &quot;Compile via CLI&quot;">​</a></h2><p>Follow these steps to compile your contract</p><h3 id="step-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1" aria-label="Permalink to &quot;Step 1&quot;">​</a></h3><p>Navigate to the hello folder in examples (./examples/hello), you should then see the <code>./src/hello.cpp</code> file</p><h3 id="step-2" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2" aria-label="Permalink to &quot;Step 2&quot;">​</a></h3><p>Run the following commands</p>',9),F=s("div",{class:"language-shell vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"shell"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"mkdir"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cd"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cdt-cpp"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-abigen"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"../src/hello.cpp"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-o"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"hello.wasm"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-I"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"../include/")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"mkdir"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cd"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cdt-cpp"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-abigen"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"../src/hello.cpp"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-o"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"hello.wasm"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-I"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"../include/")])])])],-1),h=s("div",{class:"language-shell vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"shell"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"mkdir"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cd"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cdt-cpp"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-abigen"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"../src/hello.cpp"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-o"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"hello.wasm"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-I"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"../include/")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"mkdir"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cd"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cdt-cpp"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-abigen"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"../src/hello.cpp"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-o"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"hello.wasm"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-I"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"../include/")])])])],-1),C=s("div",{class:"language-shell vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"shell"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"mkdir"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cd"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cdt-cpp"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-abigen"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"../src/hello.cpp"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-o"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"hello.wasm"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-I"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"../include/")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"mkdir"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cd"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"build")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cdt-cpp"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-abigen"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"../src/hello.cpp"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-o"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"hello.wasm"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-I"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"../include/")])])])],-1),u=n(`<p>This will generate 2 files</p><ul><li>The compiled binary wasm, <code>hello.wasm</code></li><li>The generated ABI file, <code>hello.abi</code></li></ul><h2 id="compile-via-cmake" tabindex="-1">Compile via Cmake <a class="header-anchor" href="#compile-via-cmake" aria-label="Permalink to &quot;Compile via Cmake&quot;">​</a></h2><p>You can have a look at <code>CMakeLists.txt</code> in <code>./examples/hello/src</code> as an example on how to configure a Cmake file.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">project</span><span style="color:#E1E4E8;">(hello)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">EOSIO_WASM_OLD_BEHAVIOR</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Off&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(eosio.cdt)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">add_contract</span><span style="color:#E1E4E8;">( hello hello hello.cpp )</span></span>
<span class="line"><span style="color:#B392F0;">target_include_directories</span><span style="color:#E1E4E8;">( hello </span><span style="color:#79B8FF;">PUBLIC</span><span style="color:#E1E4E8;"> \${CMAKE_SOURCE_DIR}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">include )</span></span>
<span class="line"><span style="color:#B392F0;">target_ricardian_directory</span><span style="color:#E1E4E8;">( hello \${CMAKE_SOURCE_DIR}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ricardian )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">project</span><span style="color:#24292E;">(hello)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">EOSIO_WASM_OLD_BEHAVIOR</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Off&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">find_package</span><span style="color:#24292E;">(eosio.cdt)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">add_contract</span><span style="color:#24292E;">( hello hello hello.cpp )</span></span>
<span class="line"><span style="color:#6F42C1;">target_include_directories</span><span style="color:#24292E;">( hello </span><span style="color:#005CC5;">PUBLIC</span><span style="color:#24292E;"> \${CMAKE_SOURCE_DIR}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">include )</span></span>
<span class="line"><span style="color:#6F42C1;">target_ricardian_directory</span><span style="color:#24292E;">( hello \${CMAKE_SOURCE_DIR}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ricardian )</span></span></code></pre></div><p>Follow these steps to compile your contract</p><h3 id="step-1-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1-1" aria-label="Permalink to &quot;Step 1&quot;">​</a></h3><p>Navigate to the hello folder in examples (./examples/hello), you should then see the <code>./src/hello.cpp</code> file</p><h3 id="step-2-1" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2-1" aria-label="Permalink to &quot;Step 2&quot;">​</a></h3><p>Run the following commands</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">..</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cmake</span><span style="color:#24292E;"> </span><span style="color:#032F62;">..</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span></span></code></pre></div><p>This will generate 2 files under <code>./build/hello</code> directory</p><ul><li>The compiled binary wasm, <code>hello.wasm</code></li><li>The generated ABI file, <code>hello.abi</code></li></ul>`,13);function m(_,B,g,b,k,f){const p=o("Staging"),c=o("Mainnet"),t=o("Experimental");return E(),i("div",null,[d,a(p,null,{default:e(()=>[F]),_:1}),a(c,null,{default:e(()=>[h]),_:1}),a(t,null,{default:e(()=>[C]),_:1}),u])}const S=r(y,[["render",m]]);export{$ as __pageData,S as default};
