import{_ as s,c as a,o as n,L as o}from"./chunks/framework.vEmsHuDM.js";const h=JSON.parse('{"title":"1. Intro","description":"","frontmatter":{"title":"1. Intro","outline":[0,5],"order":-99,"prev":false},"headers":[],"relativePath":"tutorials/smart-contracts/index.md","filePath":"tutorials/smart-contracts/index.md","lastUpdated":null}'),l={name:"tutorials/smart-contracts/index.md"},p=o(`<h1 id="intro-to-smart-contracts" tabindex="-1">Intro to Smart Contracts <a class="header-anchor" href="#intro-to-smart-contracts" aria-label="Permalink to &quot;Intro to Smart Contracts&quot;">​</a></h1><p>Smart contracts are pieces of code that are applied on-chain and have functions that can be called to run code.</p><p>Think of it like a REST endpoint that requires a POST request to run under specific parameters.</p><h2 id="language" tabindex="-1">Language <a class="header-anchor" href="#language" aria-label="Permalink to &quot;Language&quot;">​</a></h2><p>Smart contracts on Ultra are written in C++ and compiled down into Web Assembly.</p><p>It&#39;s not as intimidating as you think; here&#39;s an example <code>hello-world.cpp</code> contract.</p><details class="details custom-block"><summary>hello-world.cpp</summary><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mycontract</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    CONTRACT hello : public </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::contract {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">contract</span><span style="color:#E1E4E8;">::contract;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">            ACTION </span><span style="color:#B392F0;">hi</span><span style="color:#E1E4E8;">(name user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hi there, &quot;</span><span style="color:#E1E4E8;">, user.value, </span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">   };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mycontract</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CONTRACT hello : public </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::contract {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">contract</span><span style="color:#24292E;">::contract;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">            ACTION </span><span style="color:#6F42C1;">hi</span><span style="color:#24292E;">(name user) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi there, &quot;</span><span style="color:#24292E;">, user.value, </span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">   };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><h2 id="building-a-contract" tabindex="-1">Building a contract <a class="header-anchor" href="#building-a-contract" aria-label="Permalink to &quot;Building a contract&quot;">​</a></h2><p>There are 3 options to build a contract at the moment:</p><ul><li>Via <a href="./../../tutorials/docker/getting-started.html">cdt-cpp</a> with docker</li><li>Via <a href="./../../products/contract-builder/">contract-builder</a> tool</li><li>Via <a href="./compile.html">vscode extension</a></li></ul><p>Vscode extension is the easiest one to start with. However, if your project has non-trivial build steps (i.e uses scripts for code generation) it&#39;s better to use the docker option.</p>`,11),e=[p];function t(c,r,i,E,y,d){return n(),a("div",null,e)}const m=s(l,[["render",t]]);export{h as __pageData,m as default};
