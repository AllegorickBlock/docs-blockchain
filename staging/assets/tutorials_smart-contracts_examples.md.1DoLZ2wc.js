import{_ as s,c as n,o as a,L as l}from"./chunks/framework.EMf-NuUT.js";const d=JSON.parse('{"title":"6. Code Examples","description":"","frontmatter":{"title":"6. Code Examples","outline":[0,5],"order":-94,"next":false},"headers":[],"relativePath":"tutorials/smart-contracts/examples.md","filePath":"tutorials/smart-contracts/examples.md","lastUpdated":null}'),p={name:"tutorials/smart-contracts/examples.md"},o=l(`<h1 id="smart-contract-examples" tabindex="-1">Smart Contract Examples <a class="header-anchor" href="#smart-contract-examples" aria-label="Permalink to &quot;Smart Contract Examples&quot;">​</a></h1><p><a href="https://github.com/blockmatic/antelope-contracts-list" target="_blank" rel="noreferrer">Blockmatic Contract List</a> provides a ton of example links to various smart contracts that are available.</p><p>However, you might be just looking for a quick way to perform basic functionality inside of your smart contract.</p><h2 id="require-authorization-action" tabindex="-1">Require Authorization Action <a class="header-anchor" href="#require-authorization-action" aria-label="Permalink to &quot;Require Authorization Action&quot;">​</a></h2><p>Requires permission from the name passed from the client to transact.</p><details class="details custom-block"><summary>Code</summary><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ACTION</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hi</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">require_auth</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ACTION</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hi</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;"> </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">require_auth</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><h2 id="actions-with-more-parameters" tabindex="-1">Actions with More Parameters <a class="header-anchor" href="#actions-with-more-parameters" aria-label="Permalink to &quot;Actions with More Parameters&quot;">​</a></h2><p>When you need to add more parameters to your action.</p><details class="details custom-block"><summary>Code</summary><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ACTION</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hi</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, your message was: &quot;</span><span style="color:#E1E4E8;">, message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ACTION</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hi</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;"> </span><span style="color:#E36209;">user</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, your message was: &quot;</span><span style="color:#24292E;">, message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><h2 id="crud-operations" tabindex="-1">CRUD Operations <a class="header-anchor" href="#crud-operations" aria-label="Permalink to &quot;CRUD Operations&quot;">​</a></h2><p>When you want to create a data entry, store it, update it, and delete that entry from a table.</p><p>The code below is a simple &#39;set your status&#39; contract.</p><details class="details custom-block"><summary>Code</summary><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">CONTRACT status : public </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::contract {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">contract</span><span style="color:#E1E4E8;">::contract;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">        ACTION </span><span style="color:#B392F0;">setstatus</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> user, string</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> status) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">require_auth</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> info_itr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(user.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info_itr </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">                // This creates an entry in the table for the user</span></span>
<span class="line"><span style="color:#E1E4E8;">                info.</span><span style="color:#B392F0;">emplace</span><span style="color:#E1E4E8;">(user, [</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">](</span><span style="color:#B392F0;">status_struct</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">_info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    _info.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    _info.status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> status;</span></span>
<span class="line"><span style="color:#E1E4E8;">                });</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                // This modifies an existing entry, and sets existing data.</span></span>
<span class="line"><span style="color:#E1E4E8;">                info.</span><span style="color:#B392F0;">modify</span><span style="color:#E1E4E8;">(info_itr, same_payer, [</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">](</span><span style="color:#B392F0;">status_struct</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">_info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    _info.status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> status;</span></span>
<span class="line"><span style="color:#E1E4E8;">                });</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">to_string</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot; has set their status to: &quot;</span><span style="color:#E1E4E8;">, status);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        ACTION </span><span style="color:#B392F0;">rmvstatus</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">require_auth</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // This requires an entry to exist; before proceeding any further</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> info_itr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">require_find</span><span style="color:#E1E4E8;">(user.value, </span><span style="color:#9ECBFF;">&quot;user does not have any entries&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // This empties the table entry for the specified user</span></span>
<span class="line"><span style="color:#E1E4E8;">            info.</span><span style="color:#B392F0;">erase</span><span style="color:#E1E4E8;">(info_itr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">to_string</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot; removed table entry&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">        TABLE status_struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">uint64_t</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">            string status;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">uint64_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">primary_key</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> multi_index</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;status&quot;</span><span style="color:#E1E4E8;">), status_struct</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">status_t</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">status_t</span><span style="color:#E1E4E8;"> info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">status_t</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">().value);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Trevor Wessel - 2023</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">CONTRACT status : public </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::contract {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">contract</span><span style="color:#24292E;">::contract;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">        ACTION </span><span style="color:#6F42C1;">setstatus</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> user, string</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> status) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">require_auth</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> info_itr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(user.value);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info_itr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">                // This creates an entry in the table for the user</span></span>
<span class="line"><span style="color:#24292E;">                info.</span><span style="color:#6F42C1;">emplace</span><span style="color:#24292E;">(user, [</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">](</span><span style="color:#6F42C1;">status_struct</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">_info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    _info.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.value;</span></span>
<span class="line"><span style="color:#24292E;">                    _info.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> status;</span></span>
<span class="line"><span style="color:#24292E;">                });</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                // This modifies an existing entry, and sets existing data.</span></span>
<span class="line"><span style="color:#24292E;">                info.</span><span style="color:#6F42C1;">modify</span><span style="color:#24292E;">(info_itr, same_payer, [</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">](</span><span style="color:#6F42C1;">status_struct</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">_info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    _info.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> status;</span></span>
<span class="line"><span style="color:#24292E;">                });</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">to_string</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot; has set their status to: &quot;</span><span style="color:#24292E;">, status);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ACTION </span><span style="color:#6F42C1;">rmvstatus</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> user) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">require_auth</span><span style="color:#24292E;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // This requires an entry to exist; before proceeding any further</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> info_itr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">require_find</span><span style="color:#24292E;">(user.value, </span><span style="color:#032F62;">&quot;user does not have any entries&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // This empties the table entry for the specified user</span></span>
<span class="line"><span style="color:#24292E;">            info.</span><span style="color:#6F42C1;">erase</span><span style="color:#24292E;">(info_itr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">to_string</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot; removed table entry&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">        TABLE status_struct {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">uint64_t</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">            string status;</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">uint64_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">primary_key</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> multi_index</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;status&quot;</span><span style="color:#24292E;">), status_struct</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">status_t</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">status_t</span><span style="color:#24292E;"> info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">status_t</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">().value);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Trevor Wessel - 2023</span></span></code></pre></div></details><h2 id="scoped-crud-operations" tabindex="-1">Scoped CRUD Operations <a class="header-anchor" href="#scoped-crud-operations" aria-label="Permalink to &quot;Scoped CRUD Operations&quot;">​</a></h2><p>When you want to create a data entry, store it, update it, and delete that entry from a table owned by a user.</p><p>This means that table entries are owned by the user for their specific table. Only they can modify their entries.</p><p>The code below is the equivalent of a Twitter clone.</p><details class="details custom-block"><summary>Code</summary><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/system.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">CONTRACT journal : public </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::contract {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">contract</span><span style="color:#E1E4E8;">::contract;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">        ACTION </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> user, string</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> message) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">require_auth</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(message.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Message cannot exceed 256 bytes&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> current_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_current_time</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // This makes it so that multiple users can have a &#39;journal&#39;</span></span>
<span class="line"><span style="color:#6A737D;">            // They have their own tables which are scoped to their name</span></span>
<span class="line"><span style="color:#6A737D;">            // They can only add entries to the table which they own</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;"> scoped_journal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">(), user.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> journal_itr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scoped_journal.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(current_time);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(journal_itr </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> scoped_journal.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;Entry already exists for this timepoint&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            scoped_journal.</span><span style="color:#B392F0;">emplace</span><span style="color:#E1E4E8;">(user, [</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">](</span><span style="color:#B392F0;">journal_struct</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">_entry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                _entry.date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">                _entry.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">to_string</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot; added a new entry at &quot;</span><span style="color:#E1E4E8;">, current_time);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        ACTION </span><span style="color:#B392F0;">edit</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> user, </span><span style="color:#F97583;">uint32_t&amp;</span><span style="color:#E1E4E8;"> timepoint, string</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> message) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">require_auth</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;"> scoped_journal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">(), user.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> journal_itr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scoped_journal.</span><span style="color:#B392F0;">require_find</span><span style="color:#E1E4E8;">(timepoint, </span><span style="color:#9ECBFF;">&quot;entry was not found&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">            scoped_journal.</span><span style="color:#B392F0;">modify</span><span style="color:#E1E4E8;">(journal_itr, user, [</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">](</span><span style="color:#B392F0;">journal_struct</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">_entry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                _entry.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">to_string</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot; updated entry at &quot;</span><span style="color:#E1E4E8;">, timepoint);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        ACTION </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> user, </span><span style="color:#F97583;">uint32_t&amp;</span><span style="color:#E1E4E8;"> timepoint) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">require_auth</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;"> scoped_journal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">(), user.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> journal_itr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scoped_journal.</span><span style="color:#B392F0;">require_find</span><span style="color:#E1E4E8;">(timepoint, </span><span style="color:#9ECBFF;">&quot;entry was not found&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            scoped_journal.</span><span style="color:#B392F0;">erase</span><span style="color:#E1E4E8;">(journal_itr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">to_string</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot; removed journal entry at &quot;</span><span style="color:#E1E4E8;">, timepoint);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#6A737D;">        // table: journal, scope: name</span></span>
<span class="line"><span style="color:#E1E4E8;">        TABLE journal_struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> date;</span></span>
<span class="line"><span style="color:#E1E4E8;">            string message;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">primary_key</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> date;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> multi_index</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;journal&quot;</span><span style="color:#E1E4E8;">), journal_struct</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_current_time</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">current_block_time</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">to_time_point</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sec_since_epoch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Trevor Wessel - 2023</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/system.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">CONTRACT journal : public </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::contract {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">contract</span><span style="color:#24292E;">::contract;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">        ACTION </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> user, string</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> message) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">require_auth</span><span style="color:#24292E;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(message.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Message cannot exceed 256 bytes&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> current_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_current_time</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // This makes it so that multiple users can have a &#39;journal&#39;</span></span>
<span class="line"><span style="color:#6A737D;">            // They have their own tables which are scoped to their name</span></span>
<span class="line"><span style="color:#6A737D;">            // They can only add entries to the table which they own</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;"> scoped_journal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">(), user.value);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> journal_itr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scoped_journal.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(current_time);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(journal_itr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> scoped_journal.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;Entry already exists for this timepoint&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            scoped_journal.</span><span style="color:#6F42C1;">emplace</span><span style="color:#24292E;">(user, [</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">](</span><span style="color:#6F42C1;">journal_struct</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">_entry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                _entry.date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.value;</span></span>
<span class="line"><span style="color:#24292E;">                _entry.message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">to_string</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot; added a new entry at &quot;</span><span style="color:#24292E;">, current_time);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ACTION </span><span style="color:#6F42C1;">edit</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> user, </span><span style="color:#D73A49;">uint32_t&amp;</span><span style="color:#24292E;"> timepoint, string</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> message) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">require_auth</span><span style="color:#24292E;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;"> scoped_journal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">(), user.value);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> journal_itr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scoped_journal.</span><span style="color:#6F42C1;">require_find</span><span style="color:#24292E;">(timepoint, </span><span style="color:#032F62;">&quot;entry was not found&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">            scoped_journal.</span><span style="color:#6F42C1;">modify</span><span style="color:#24292E;">(journal_itr, user, [</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">](</span><span style="color:#6F42C1;">journal_struct</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">_entry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                _entry.message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">to_string</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot; updated entry at &quot;</span><span style="color:#24292E;">, timepoint);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ACTION </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> user, </span><span style="color:#D73A49;">uint32_t&amp;</span><span style="color:#24292E;"> timepoint) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">require_auth</span><span style="color:#24292E;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;"> scoped_journal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">(), user.value);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> journal_itr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scoped_journal.</span><span style="color:#6F42C1;">require_find</span><span style="color:#24292E;">(timepoint, </span><span style="color:#032F62;">&quot;entry was not found&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            scoped_journal.</span><span style="color:#6F42C1;">erase</span><span style="color:#24292E;">(journal_itr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">to_string</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot; removed journal entry at &quot;</span><span style="color:#24292E;">, timepoint);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#6A737D;">        // table: journal, scope: name</span></span>
<span class="line"><span style="color:#24292E;">        TABLE journal_struct {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> date;</span></span>
<span class="line"><span style="color:#24292E;">            string message;</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">primary_key</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> date;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> multi_index</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;journal&quot;</span><span style="color:#24292E;">), journal_struct</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_current_time</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">current_block_time</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">to_time_point</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sec_since_epoch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Trevor Wessel - 2023</span></span></code></pre></div></details><h2 id="reading-data-from-table-iterators" tabindex="-1">Reading Data from Table Iterators <a class="header-anchor" href="#reading-data-from-table-iterators" aria-label="Permalink to &quot;Reading Data from Table Iterators&quot;">​</a></h2><p>In some cases, you may need to read directly from a table in a contract.</p><p>You can use the iterator to directly access the data.</p><p>The code below is based on the Scoped CRUD Operations</p><details class="details custom-block"><summary>Code</summary><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;"> scoped_journal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">journal_t</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">(), user.value);</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> journal_itr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scoped_journal.</span><span style="color:#B392F0;">require_find</span><span style="color:#E1E4E8;">(timepoint, </span><span style="color:#9ECBFF;">&quot;entry was not found&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Message at &quot;</span><span style="color:#E1E4E8;">, timepoint, </span><span style="color:#9ECBFF;">&quot; is &quot;</span><span style="color:#E1E4E8;">, journal_itr-&gt;message);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;"> scoped_journal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">journal_t</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">(), user.value);</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> journal_itr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scoped_journal.</span><span style="color:#6F42C1;">require_find</span><span style="color:#24292E;">(timepoint, </span><span style="color:#032F62;">&quot;entry was not found&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Message at &quot;</span><span style="color:#24292E;">, timepoint, </span><span style="color:#032F62;">&quot; is &quot;</span><span style="color:#24292E;">, journal_itr-&gt;message);</span></span></code></pre></div></details><h2 id="listening-for-token-transfers" tabindex="-1">Listening for Token Transfers <a class="header-anchor" href="#listening-for-token-transfers" aria-label="Permalink to &quot;Listening for Token Transfers&quot;">​</a></h2><p>The code below allows only the default <code>UOS</code> token with a precision of <code>8</code>.</p><p><em>You must add the <code>eosio.code</code> permission to your account to use this.</em></p><details class="details custom-block"><summary>Code</summary><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/asset.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/symbol.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;eosio/system.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">CONTRACT hello : public </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::contract {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">contract</span><span style="color:#E1E4E8;">::contract;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">[[</span><span style="color:#B392F0;">eosio</span><span style="color:#79B8FF;">::</span><span style="color:#B392F0;">on_notify</span><span style="color:#79B8FF;">(</span><span style="color:#9ECBFF;">&quot;eosio.token::transfer&quot;</span><span style="color:#79B8FF;">)]]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deposit</span><span style="color:#E1E4E8;">(name from, name to, </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::asset amount, </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string memo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(amount.amount </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;deposit amount should be positive&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // We want to ignore any transfers not going to us</span></span>
<span class="line"><span style="color:#6A737D;">            // We want to make sure we are ignoring transfers out from ourselves</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (to </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_self</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(memo.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(amount.symbol </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eosio</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;UOS&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;Not the token we need. Bye.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#6A737D;">            // You can check a memo here after an &#39;order&#39; is created</span></span>
<span class="line"><span style="color:#6A737D;">            // An order can be given a string value</span></span>
<span class="line"><span style="color:#6A737D;">            // The memo can then be used to find a table entry</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/print.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/asset.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/symbol.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;eosio/system.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">CONTRACT hello : public </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::contract {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">contract</span><span style="color:#24292E;">::contract;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">[[</span><span style="color:#6F42C1;">eosio</span><span style="color:#005CC5;">::</span><span style="color:#6F42C1;">on_notify</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">&quot;eosio.token::transfer&quot;</span><span style="color:#005CC5;">)]]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deposit</span><span style="color:#24292E;">(name from, name to, </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::asset amount, </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string memo) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(amount.amount </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;deposit amount should be positive&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">            // We want to ignore any transfers not going to us</span></span>
<span class="line"><span style="color:#6A737D;">            // We want to make sure we are ignoring transfers out from ourselves</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_self</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(memo.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(amount.symbol </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eosio</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;UOS&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;Not the token we need. Bye.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#6A737D;">            // You can check a memo here after an &#39;order&#39; is created</span></span>
<span class="line"><span style="color:#6A737D;">            // An order can be given a string value</span></span>
<span class="line"><span style="color:#6A737D;">            // The memo can then be used to find a table entry</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></details><h2 id="listening-for-uniq-transfers" tabindex="-1">Listening for Uniq Transfers <a class="header-anchor" href="#listening-for-uniq-transfers" aria-label="Permalink to &quot;Listening for Uniq Transfers&quot;">​</a></h2><p>If you want to listen for transfers from <code>eosio.nft.ft</code> see <a href="./../../tutorials/uniq-factories/uniq-variants/Examples/on-issue.html">onIssue Example</a>.</p>`,29),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{d as __pageData,m as default};
