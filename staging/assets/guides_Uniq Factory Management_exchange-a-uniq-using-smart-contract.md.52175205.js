import{_ as s,v as a,b as n,R as o}from"./chunks/framework.ead9a57c.js";const C=JSON.parse('{"title":"Exchange a Uniq Using Smart Contract","description":"","frontmatter":{"title":"Exchange a Uniq Using Smart Contract","deploy":["staging","mainnet"],"order":3},"headers":[],"relativePath":"guides/Uniq Factory Management/exchange-a-uniq-using-smart-contract.md","filePath":"guides/Uniq Factory Management/exchange-a-uniq-using-smart-contract.md","lastUpdated":null}'),l={name:"guides/Uniq Factory Management/exchange-a-uniq-using-smart-contract.md"},p=o(`<h1 id="exchange-a-uniq-using-smart-contract" tabindex="-1">Exchange a Uniq Using Smart Contract <a class="header-anchor" href="#exchange-a-uniq-using-smart-contract" aria-label="Permalink to &quot;Exchange a Uniq Using Smart Contract&quot;">​</a></h1><h2 id="what-does-exchange-a-uniq-mean" tabindex="-1">What does &quot;Exchange a Uniq&quot; mean <a class="header-anchor" href="#what-does-exchange-a-uniq-mean" aria-label="Permalink to &quot;What does &quot;Exchange a Uniq&quot; mean&quot;">​</a></h2><p>In this guide, we will cover the possibility of issuing a new Uniq to the user when he burns or transfers some other Uniq. The purpose of such an exchange may be to migrate a user Uniq to a newer factory which may have different set of rules (e.g. Uniqs from new factory can be transferred).</p><p>An alternative use case could be if you want to allow users to redeem a Uniq using some &quot;ticket&quot; Uniq which does not have anything useful by itself but can be exchanged for an actual Uniq from a different factory.</p><p>Some of the factory&#39;s values are immutable after they are created, and when a Uniq is exchanged it provides the opportunity for customers to migrate to a new factory with different values.</p><h2 id="when-do-you-need-a-smart-contract" tabindex="-1">When do you need a smart contract <a class="header-anchor" href="#when-do-you-need-a-smart-contract" aria-label="Permalink to &quot;When do you need a smart contract&quot;">​</a></h2><p>You won&#39;t need a dedicated smart contract for each case where you need to exchange Uniqs. In some cases the first-hand purchase options may be sufficient enough: <a href="./factory-purchase-options.html#purchase-option-use-cases">factory purchase options</a>.</p><p>You should consider using the smart contract approach in the following scenarios:</p><ul><li>I want to exchange Uniq only if some specific conditions are met which are not covered by first-hand purchase feature <ul><li>examples include: requiring preregistration using a dedicated smart contract action; having alternative pricing model where you will check that the payment was done using smart contract;</li></ul></li><li>I have some automation requirements which requires minimum user input <ul><li>since smart contracts are flexible, you are able to do more things than besides simply minting a Uniq</li></ul></li><li>There is an extra interaction with other smart contract that needs to happen <ul><li>NFT contract by default notifies only certain accounts about the action execution and if you need to extend this list you will have to rely on your own smart contract to notify other contracts</li></ul></li></ul><h2 id="overview-of-the-smart-contract" tabindex="-1">Overview of the smart contract <a class="header-anchor" href="#overview-of-the-smart-contract" aria-label="Permalink to &quot;Overview of the smart contract&quot;">​</a></h2><p>Smart contract provided on this page does and showcases the following:</p><ul><li>Smart contract is notified when token is burnt or transferred <ul><li>Burn notification happens only if contract is deployed to the same account as token factory manager</li><li>Transfer notification happens for both sender, receiver of the token and the token factory manager</li></ul></li><li>Smart contract issues a new Uniq from the pre-configured factory to the original owner of the Uniq</li></ul><p>To make the contract below work based on your needs, you will need to do some adjustments:</p><ul><li>Change name of the factory manager account to the one appropriate to the factory you are trying to mint from</li><li>Change factory id of the factory you are going to mint from</li><li>Add any necessary preliminary checks before issuing a token <ul><li>You may potentially want to check what token was burnt or transferred (id of the token, serial number of factory id)</li><li>There could be other requirements that you want to impose, like requiring user to register via some other smart contract action</li></ul></li><li>Depending on the permission structure and where you put the contract, you may want to add <code>smart_contract_name@eosio.code</code> permission under the <code>factory_manager@active</code> so that the contract will be able to issue tokens in the name of the factory manager</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that in the later versions of NFT standard the specific names of the actions and their interface may change so be sure to reference the pages under <em><a href="./../../contracts/NFT Contract/NFT Actions/">NFT contract actions</a></em></p></div><p>Source code for Uniq swap contract is provided below</p><details class="details custom-block"><summary>uniq.swap.hpp</summary><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/eosio.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/system.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/asset.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">eosio/singleton.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// replace these with your actual factory manager account</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// simplest scenario is that the manager account and the account you place this contract in are the same</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// in this case can use get_self() instead of writing the account name explicitly</span></span>
<span class="line"><span style="color:#C792EA;">constexpr</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">name factory_manager</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1aa2aa3aa4aa</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">constexpr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint64_t</span><span style="color:#A6ACCD;"> factory_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1234</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">burn_wrap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> owner</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">uint64_t_vector</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> token_ids</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> memo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">burn_wrap</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">owner</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">token_ids</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">memo</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">transfer_wrap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> from</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> to</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">uint64_t_vector</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> token_ids</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> memo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">transfer_wrap</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">token_ids</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">memo</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;"> token_factory_id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> amount</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    string custom_data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_config</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">token_factory_id</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">amount</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">custom_data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">issue_token_config</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> issue_token_config_vector</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_metadata</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> meta_uri</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">checksum256</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> meta_hash</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_token_metadata</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">meta_uri</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">meta_hash</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#F07178;"> vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">issue_token_metadata</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> issue_token_metadata_vector</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// this struct is not required but provides a reference about the interface of issue.b action</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    name                      to</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    issue_token_config_vector token_configs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    string                    memo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">            authorizer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">asset</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">           maximum_uos_payment</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    binary_extension</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">issue_token_metadata_vector</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> token_metadata</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">EOSLIB_SERIALIZE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">token_configs</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">memo</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">authorizer</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">maximum_uos_payment</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">token_metadata</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">action</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">issue.b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">issue_v1</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_wrap_v1</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">issue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">issue_v1_action</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">action_wrapper</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">issue.b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">issue_v1</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uniq.swap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">uniq_swap_contract</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">contract</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">contract</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">uniq_swap_contract</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">receiver</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">datastream</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">ds</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">contract</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">receiver</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ds</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // will be called when someone transfers a token</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // note that contract is notified if the token is transferred either from or to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // the account that has this contract or if the token that is being transferred</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // is from the factory managed by the account which has this contract</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">on_notify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft::transfer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">on_transfer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">transfer_wrap</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // will be called when someone burns a token</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // note that contract is notified only if the token being burnt is from a factory</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // managed by the account which has this contract</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // as such there is little reason to have this notification if the contract will</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // be deployed to the account which is not a factory manager</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">[[</span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">on_notify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft::burn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">on_burn</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">burn_wrap</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div></details><details class="details custom-block"><summary>uniq.swap.cpp</summary><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">uniq.swap.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">issue_token</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">user</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // to make factory manager permission accessible to the smart contract you need to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // add the code permission to the factory manager account</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // example: contract is set to 1aa2aa3aa4aa account, factory manager is 1aa2aa3aa4ab</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // need to add 1aa2aa3aa4aa@eosio.code permission to 1aa2aa3aa4ab@active</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">action</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        permission_level{factory_manager</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eosio</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">name{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">active</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">}}</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eosio.nft.ft</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">issue.b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">_n</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">make_tuple</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            user</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            issue_token_config_vector{ { .token_factory_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> factory_id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> .amount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> } }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            string{</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">&gt;(),</span></span>
<span class="line"><span style="color:#A6ACCD;">            optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">issue_token_metadata_vector</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ultra_avatar_contract</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">on_transfer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">transfer_wrap</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // only want to swap a token if it was transferred to the factory manager</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">to </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> factory_manager</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // if you put check() instead of return it will make it so users won&#39;t be able</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // to transfer tokens from your factory between each other</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // perform any other checks you want here</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">issue_token</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">from</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ultra_avatar_contract</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">on_burn</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">burn_wrap</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // perform any checks you want here</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">issue_token</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">owner</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></details>`,18),t=[p];function e(c,r,F,y,i,D){return a(),n("div",null,t)}const h=s(l,[["render",e]]);export{C as __pageData,h as default};
